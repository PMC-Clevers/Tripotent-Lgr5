


cvpfop_filt <- subset(cvpfop, idents = c("15", "14", "13", "17"), invert= T)

#option 2
cvpfop_filt <- FindVariableFeatures(cvpfop_filt)
cvpfop_filt <- RunPCA(cvpfop_filt, pc.genes = hv.genes, pcs.compute =30 , ndims.print = 1:5, nfeatures.print = 5, genes.print = 5)
ElbowPlot( cvpfop_filt, ndims = 50)
cvpfop_filt <- FindNeighbors(cvpfop_filt, reduction = "pca", dims = 1:25, nn.eps = 0.5) 
cvpfop_filt <- FindClusters(cvpfop_filt, resolution = 0.5, n.start = 10) 
cvpfop_filt <- RunUMAP(cvpfop_filt, dims = 1:28, min.dist = 0.4)
DimPlot(cvpfop_filt, reduction = "umap", pt.size = 0.1, label = T, ncol = 3) + ggtitle(label = "UMAP")
cvpfop_filt <- subset(cvpfop_filt,idents = "7", invert = T  )
cvpfop_filt.cds <- as.cell_data_set(cvpfop_filt)
cvpfop_filt.cds <- estimate_size_factors(cvpfop_filt.cds)
cvpfop_filt.cds <- cluster_cells(cds = cvpfop_filt.cds, reduction_method = "UMAP", cluster_method = 'louvain')
cvpfop_filt.cds <- learn_graph(cvpfop_filt.cds, use_partition = TRUE)
cvpfop_filt.cds <- order_cells(cvpfop_filt.cds, reduction_method = "UMAP")

####cvpfop_filt_comment reviewers Keep old labels 
cvpfop_filt$cell_types <- NA  # First, reset annotations

# Assign old annotations where possible
valid_cells <- rownames(cvpfop_filt@meta.data) %in% rownames(annocvpfop@meta.data)
cvpfop_filt$cell_types[valid_cells] <- annocvpfop$cell_types[rownames(cvpfop_filt@meta.data)[valid_cells]]

# Assign "Unknown" to new clusters (or rename them manually)
cvpfop_filt$cell_types[is.na(cvpfop_filt$cell_types)] <- "Unknown"
cvpfop_filt <- subset(cvpfop_filt, idents = "Unknown", invert = T )
table(Idents(cvpfop_filt))  # Should now match `cell_types`
cvpfop_filt <- RenameIdents(cvpfop_filt, 
                            "1" = "Basal progenitor",
                            "2" = "non-taste Lingual EC",
                            "3" = "Lgr5+ stem cell",
                            "4" = "Cycling Basal",
                            "5" = "Krt14+ Basal",
                            "6" = "Ductal (Saliva)",
                            "7" = "Intermediate progenitor",
                            "8" = "Taste (Type-I, III & IV)",
                            "9" = "Taste (Type-II)")



p6a <- plot_cells(
   cds = cvpfop_filt.cds,
   color_cells_by = "cell_types", 
   show_trajectory_graph = F,
   labels_per_group = 1,
   label_cell_groups = F) 

p6b <- plot_cells(
  cds = cvpfop_filt.cds ,
  color_cells_by = "pseudotime",
  show_trajectory_graph = TRUE)




p6a + NoAxes()+
   theme(
     axis.title = element_blank(),     # Remove axis titles
     axis.text = element_blank(),      # Remove axis text
     axis.ticks = element_blank(),     # Remove axis ticks
     legend.title = element_text(size = 14),  # Increase size of legend title
     legend.text = element_text(size = 12),   # Increase size of legend text
     plot.title = element_text(size = 16, face = "bold"), # Increase plot title size
     plot.margin = margin(20, 20, 20, 20)  # Increase margin for more space around plot
   ) 



 p6b + NoAxes()+
   theme(
     axis.title = element_blank(),     # Remove axis titles
     axis.text = element_blank(),      # Remove axis text
     axis.ticks = element_blank(),     # Remove axis ticks
     legend.title = element_text(size = 14),  # Increase size of legend title
     legend.text = element_text(size = 12),   # Increase size of legend text
     plot.title = element_text(size = 16, face = "bold"), # Increase plot title size
     plot.margin = margin(20, 20, 20, 20)  # Increase margin for more space around plot
   ) 

cvpfop_filt$cell_types[shared_cells] <- annocvpfop$cell_types[shared_cells]

cvpfop_filt$cell_types <- new.cluster.ids[as.numeric(cvpfop_filt$cell_types)]

SeuratChat <- function(Seuratrds, clusters) {
  # Subset Seurat object by clusters
  Seuratrds <- subset(Seuratrds, seurat_clusters %in% clusters)
  
  # Create SingleCellExperiment object
  expdata <- as.matrix(Seuratrds@assays$RNA@data)
  rownames(expdata) <- rownames(Seuratrds@assays$RNA@data)
  sce <- SingleCellExperiment(assays = list(expdata = expdata), reducedDims = SimpleList(UMAP = Seuratrds@reductions$umap@cell.embeddings))
  
  # Add metadata information
  colData(sce)$Pseudotime <- Seuratrds@meta.data$Pseudotime
  
  return(sce)
}

l5t <- subset(cvpfop_filt, idents =c(4,11,12))
l5vE <- subset(cvpfop_filt, idents =c(4,10, 6, 7))
l5t.cds <- as.cell_data_set(l5t)
l5vE.cds <- as.cell_data_set(l5vE)

sce_l5t <- SeuratChat(cvpfop_filt, c(4,11,12))
sce_l5vE <- SeuratChat(cvpfop_filt, c(4,10, 6, 7))

sce_l5t <- binarize_exp(sce_l5t, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff)
sce_l5vE <- binarize_exp(sce_l5vE, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff)

sce_l5t <- find_switch_logistic_fastglm(sce_l5t,downsample = F, show_warning = FALSE)
sce_l5vE <- find_switch_logistic_fastglm(sce_l5vE,downsample = F, show_warning = FALSE)


gs_genelists <- read.csv("Mouse_TFs_Surface.csv")
genelist <- read.csv("Mouse_TFs.csv")
sg_allgenes_l5t150 <- filter_switchgenes(sce_l5t, allgenes = TRUE, topnum = 150)
sg_gtypes_l5t150 <- filter_switchgenes(sce_l5t, allgenes = FALSE, topnum = 150,
                                genelists = gs_genelists, genetype = c("Surface proteins", "TFs"))
sg_l5t150 <- rbind(sg_gtypes_l5t150, sg_allgenes_l5t150[setdiff(rownames(sg_allgenes_l5t150), rownames(sg_gtypes_l5t150)),])
plot_timeline_ggplot(sg_l5t150, timedata = sce_l5t$Pseudotime, txtsize = 3) 

plot_timeline_ggplot(sg_l5vE150, timedata = l5vE.cds$Pseudotime, txtsize = 3) 

sg_allgenes_l5vE150 <- filter_switchgenes(sce_l5vE, allgenes = TRUE, topnum = 100)

sg_gtypes_l5vE150 <- filter_switchgenes(sce_l5vE, allgenes = FALSE, topnum = 150,
                                genelists = gs_genelists, genetype = c("Surface proteins", "TFs"))

sg_l5vE150 <- rbind(sg_gtypes_l5vE150, sg_allgenes_l5vE150[setdiff(rownames(sg_allgenes_l5vE150), rownames(sg_gtypes_l5vE150)),])


Tfidl5t <- c("Hes6", "Elf3", "Zbtb20", "Foxa2", "Prox1", "Plagl1", "Mecp2", "Maff", "Zfp428", "Klf7", "Hsf2", "Sox2")


### l5t pseudotime TFs 
Tfidl5t <- c("Hes6", "Elf3", "Zbtb20", "Foxa2", "Prox1", "Plagl1", "Mecp2", "Maff", "Zfp428", "Klf7", "Hsf2", "Sox2")

l5t.cds <- estimate_size_factors(l5t.cds)
l5t.cds <- cluster_cells(cds = l5t.cds, reduction_method = "UMAP", cluster_method = 'louvain')
l5t.cds <- learn_graph(l5t.cds, use_partition = TRUE)
l5t.cds <- order_cells(l5t.cds, reduction_method = "UMAP")
cds_subset_l5t <- choose_graph_segments(l5t.cds,clear_cds=FALSE)

cds_subset_l5t <- l5t.cds[row.names(l5t.cds) %in% Tfidl5t]
gene_fits <- fit_models(cds_subset_l5t, model_formula_str = "~Pseudotime")
fit_coefs <- coefficient_table(gene_fits)
time_terms <- fit_coefs %>% filter(term == "Pseudotime")
time_terms %>% filter (q_value < 0.05) %>%
  select(gene_id, term, q_value, estimate)
plot_genes_in_pseudotime(cds_subset_l5t, 
                         color_cells_by="seurat_clusters",
                         min_expr=0.5, label_by_short_name = F)

#### l5vE pseudotime TFs 
Tfidl5vE <- c("Ehf", "Tfcp2l1", "Foxc1", "Barx2", "Sox9")


l5vE.cds <- estimate_size_factors(l5vE.cds)
l5vE.cds <- cluster_cells(cds = l5vE.cds, reduction_method = "UMAP", cluster_method = 'louvain')
l5vE.cds <- learn_graph(l5vE.cds, use_partition = TRUE)
l5vE.cds <- order_cells(l5vE.cds, reduction_method = "UMAP")

cds_subset_l5vE <- choose_graph_segments(l5vE.cds,clear_cds=FALSE)

cds_subset_l5vE <- l5vE.cds[row.names(l5vE.cds) %in% Tfidl5vE]
gene_fits <- fit_models(cds_subset_l5vE, model_formula_str = "~Pseudotime")
fit_coefs <- coefficient_table(gene_fits)
time_terms <- fit_coefs %>% filter(term == "Pseudotime")
time_terms %>% filter (q_value < 0.05) %>%
  select(gene_id, term, q_value, estimate)



#### get all TFs down from taste and von ebner and up from basal lgr5 

l5t_TFsdown <- sg_l5t[intersect(which(sg_l5t$direction == "down")
                 ,which(sg_l5t$feature_type == "TFs")),]
l5vE_TFsdown <- sg_l5vE[intersect(which(sg_l5vE$direction == "down")
                                 ,which(sg_l5vE$feature_type == "TFs")),]



Figure 6 g - h

save(dataframe_for_heatmap_l5vE, file= "dataframe_for_heatmap_l5vE.Rda")
### basal to Lgr5

write.table(dataframe_for_heatmap, "20240108_df_heatmap.csv")
write.table(dataframe_for_heatmap_l5t, "20240108_df_heatmap_l5t.csv")
write.table(dataframe_for_heatmap_l5vE, "20240108_df_heatmap_l5vE.csv")
rm(dataframe_for_heatmap_l5t)
dataframe_for_heatmap_l5t <- read.table("20240108_df_heatmap_l5t.csv", sep = "")
dataframe_for_heatmap_l5vE <- read.csv("20240108_df_heatmap_l5vE.csv", sep = "")
dataframe_for_heatmap_l5vE <- as.data.frame(dataframe_for_heatmap_l5vE)

dataframe_for_heatmap_l5t <- as.data.frame(dataframe_for_heatmap_l5t)
dataframe_for_heatmap <- data.frame("Pseudotime" = cds_subset_basL5@colData$Pseudotime,
                                    "Hes6" = monocle3::normalized_counts(cds_subset_basL5)["Hes6",],
                                    "Elf3" = monocle3::normalized_counts(cds_subset_basL5)["Elf3",],
                                    "Pax1" = monocle3::normalized_counts(cds_subset_basL5)["Pax1",],
                                    "Tshz2" = monocle3::normalized_counts(cds_subset_basL5)["Tshz2",],
                                    "Xpa" = monocle3::normalized_counts(cds_subset_basL5)["Xpa",],
                                    "Foxe1" = monocle3::normalized_counts(cds_subset_basL5)["Foxe1",],
                                    "Cenpa" = monocle3::normalized_counts(cds_subset_basL5)["Cenpa",],
                                    "Tbx3" = monocle3::normalized_counts(cds_subset_basL5)["Tbx3",],
                                    "Xbp1" = monocle3::normalized_counts(cds_subset_basL5)["Xbp1",],
                                    "Sox9" = monocle3::normalized_counts(cds_subset_basL5)["Sox9",],
                                    "Runx1" = monocle3::normalized_counts(cds_subset_basL5)["Runx1",],
                                    "Tcf4" = monocle3::normalized_counts(cds_subset_basL5)["Tcf4",])


dataframe_for_heatmap_l5t <- data.frame("Pseudotime" = cds_subset_l5t@colData$Pseudotime,
                                    "Klf7" = monocle3::normalized_counts(cds_subset_l5t)["Klf7",],
                                    "Elf3" = monocle3::normalized_counts(cds_subset_l5t)["Elf3",],
                                    "Hes6" = monocle3::normalized_counts(cds_subset_l5t)["Hes6",],
                                    "Prox1" = monocle3::normalized_counts(cds_subset_l5t)["Prox1",],
                                    "Foxa2" = monocle3::normalized_counts(cds_subset_l5t)["Foxa2",],
                                    "Zfp428" = monocle3::normalized_counts(cds_subset_l5t)["Zfp428",],
                                    "Plagl1" = monocle3::normalized_counts(cds_subset_l5t)["Plagl1",],
                                    "Hsf2" = monocle3::normalized_counts(cds_subset_l5t)["Hsf2",],
                                    "Maff" = monocle3::normalized_counts(cds_subset_l5t)["Maff",],
                                    "Sox2" = monocle3::normalized_counts(cds_subset_l5t)["Sox2",],
                                    "Zbtb20" = monocle3::normalized_counts(cds_subset_l5t)["Zbtb20",],
                                    "Mecp2" = monocle3::normalized_counts(cds_subset_l5t)["Mecp2",])



dataframe_for_heatmap_l5vE <- data.frame("Pseudotime" = cds_subset_l5vE@colData$Pseudotime,
                                        "Tfcp2l1" = monocle3::normalized_counts(cds_subset_l5vE)["Tfcp2l1",],
                                        "Ehf" = monocle3::normalized_counts(cds_subset_l5vE)["Ehf",],
                                        "Barx2" = monocle3::normalized_counts(cds_subset_l5vE)["Barx2",],
                                        "Sox9" = monocle3::normalized_counts(cds_subset_l5vE)["Sox9",],
                                        "Foxc1" = monocle3::normalized_counts(cds_subset_l5vE)["Foxc1",])

dataframe_for_heatmap_l5t <- t(dataframe_for_heatmap_l5t)
pheatmap(dataframe_for_heatmap_l5t[c(2:length(rownames(dataframe_for_heatmap_l5t))),
                               order(dataframe_for_heatmap_l5t["Pseudotime",])],
         cluster_rows = F, cluster_cols = F, labels_col = F, color = c("blue" ,"lightblue", "lightgoldenrod1",
                                                                       "white","lightpink", "red", "red",
                                                                       "red2", "red3","red4")) + 
  scale_color_manual(values = c("blue", "white", "yellow", "red"))

colorRamp2(seq(from=-2,to=2,length=11),rev(brewer.pal(11, "Spectral")))

pheatmap(dataframe_for_heatmap[c(2:length(rownames(dataframe_for_heatmap))),
                               order(dataframe_for_heatmap["Pseudotime",])], 
         cluster_rows = F, cluster_cols = F, labels_col = F, color = colorRampPalette(c("navy", "white", "red"))(50))
         



##from github
cds <- cds_subset_l5t
pt.matrix <- as.matrix(dataframe_for_heatmap_l5t[-1,][,order(dataframe_for_heatmap_l5t["Pseudotime",])])
pt.matrix <- apply(dataframe_for_heatmap_l5t[-1,],1,function(x){smooth.spline(x, y = dataframe_for_heatmap_l5t[1,],df=4)$y})
pt.matrix_2 <- t(apply(pt.matrix,1,function(x){(x-mean(x))/sd(x)}))
pt.matrix[,"Pseudotime"] <- dataframe_for_heatmap_l5t[,]

pt.matrix <- t(apply(pt.matrix,1,function(x){smooth.spline(x,df=3)$y}))
pt.matrix <- t(apply(pt.matrix,1,function(x){(x-mean(x))/sd(x)}))
##example
ht <- Heatmap(
  pt.matrix,
  name                         = "z-score",
  col                          = colorRamp2(seq(from=-2,to=2,length=11),rev(brewer.pal(11, "Spectral"))),
  show_row_names               = TRUE,
  show_column_names            = FALSE,
  row_names_gp                 = gpar(fontsize = 6),
  km = 6,
  row_title_rot                = 0,
  cluster_rows                 = TRUE,
  cluster_row_slices           = FALSE,
  cluster_columns              = FALSE)
cprint(ht)

new_matrix <- apply(dataframe_for_heatmap_l5t[-1,order(dataframe_for_heatmap_l5t["Pseudotime", ])],1, function(x){runmed(x,51)})
pheatmap::pheatmap(pt.matrix, 
                   cluster_rows = F, 
                   cluster_cols = F, 
                   labels_col = F,
                   color = colorRampPalette(rev(brewer.pal(11, "Spectral")))(50))

pheatmap::pheatmap(pt.matrix[c(2:length(rownames(pt.matrix))),order(pt.matrix["Pseudotime",])], cluster_rows = F, cluster_cols = F, labels_col = F, color = colorRamp2(rev(brewer.pal(11, "Spectral")))
seq(from=-2,to=3,length=11),






