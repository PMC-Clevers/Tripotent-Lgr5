##TASTE cvp fop
taste <- subset(cvpfop1, idents = c("9", "10"))
taste <- NormalizeData(object = taste, normalization.method = "LogNormalize", scale.factor = 10000)
taste <- FindVariableFeatures(taste)
taste <- RunPCA(taste, pc.genes = hv.genes, pcs.compute =12 , ndims.print = 1:5, nfeatures.print = 5, genes.print = 5)
ElbowPlot( taste, ndims = 50)
#Jaccard similarity & Louvain algorithme 
taste<- FindNeighbors(taste, reduction = "pca", dims = 1:12, nn.eps = 0.5) 
taste <- FindClusters(taste, resolution = 0.4, n.start = 10) 

taste.Markers <- FindAllMarkers(taste, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

new.cluster.ids = c("Type-I", "Type-III","Type-II", "Type-IV", "Type-I", "Type-II(bitter)","Type-II(sweet/umami)")
names(x = new.cluster.ids) <- levels(x = taste)
tasteanno <- RenameIdents(object = taste, new.cluster.ids)



ggplotColours <- function(n = 6, h = c(0, 360) + 15){
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}

clust.cols <- ggplotColours(n=6)





saliva <- subset(so.combined, idents = c("11", "5", "7") )
saliva <- NormalizeData(object = salivar, normalization.method = "LogNormalize", scale.factor = 10000)
saliva <- FindVariableFeatures(saliva)
saliva <- RunPCA(saliva, pc.genes = hv.genes, pcs.compute =15 , ndims.print = 1:5, nfeatures.print = 5, genes.print = 5)
ElbowPlot( saliva, ndims = 50)
#Jaccard similarity & Louvain algorithme 
saliva <- FindNeighbors(saliva, reduction = "pca", dims = 1:15, nn.eps = 0.5) 
saliva <- FindClusters(saliva, resolution = 0.4, n.start = 10)
saliva <- RunUMAP(saliva, dims = 1:15, min.dist = 0.5)

saliva.Markers <- FindAllMarkers(saliva, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
#filter out low quality cluster
saliva <- subset(saliva, idents = "6", invert = T)

new.cluster.ids = c("Basal duct(Krt5/Krt14)", "Basal duct(Krt14)","Ductal","Ductal/Serous", "Myo-epithelial", "Acinar (Serous) ","Acinar (mucus)", "Prolif. Endbud", "Diff. Ductal" )
names(x = new.cluster.ids) <- levels(x = saliva)
saliva <- RenameIdents(object = saliva, new.cluster.ids)


saliva.Markers <- FindAllMarkers(saliva, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)


####https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7718488/ 
#### GSE150327 dataset --> Postnatal SMG Integrated.rds
postnatalSMG <- readRDS("Postnatal SMG Integrated.rds")
DimPlot(postnatalSMG, reduction = 'umap')

striated.markers <- FindMarkers(postnatalSMG, ident.1 = "Striated duct", ident.2 = NULL, min.pct = 0.25)
intercalated.markers <- FindMarkers(postnatalSMG, ident.1 = "Intercalated duct", ident.2 = NULL, min.pct = 0.25)
GCT.markers <- FindMarkers(postnatalSMG, ident.1 = "GCT", ident.2 = NULL, min.pct = 0.25)
serousacinar.markers <- FindMarkers(postnatalSMG, ident.1 = "Serous acinar", ident.2 = NULL, min.pct = 0.25)
seromucus.markers <- FindMarkers(postnatalSMG, ident.1 = "Seromucous acinar", ident.2 = NULL, min.pct = 0.25)
k19duct.markers <- FindMarkers(postnatalSMG, ident.1 = "Krt19+ duct", ident.2 = NULL, min.pct = 0.25)
myo.markers  <- FindMarkers(postnatalSMG, ident.1 = "Myoepithelial", ident.2 = NULL, min.pct = 0.25)
Basal.markers  <- FindMarkers(postnatalSMG, ident.1 = "Basal duct", ident.2 = NULL, min.pct = 0.25)


top100.basalduct<- Basal.markers %>%  slice_max(n = 100, order_by = avg_log2FC)

top100.striated<- striated.markers %>%  slice_max(n = 100, order_by = avg_log2FC)
top100.intercalated<- intercalated.markers %>%  slice_max(n = 100, order_by = avg_log2FC)
top100.GCT<- GCT.markers %>%  slice_max(n = 100, order_by = avg_log2FC)
top100.serous<- serousacinar.markers %>%  slice_max(n = 100, order_by = avg_log2FC)
top100.seromucus<- seromucus.markers %>%  slice_max(n = 100, order_by = avg_log2FC)
top100.k19duct<- k19duct.markers %>%  slice_max(n = 100, order_by = avg_log2FC)
top100.myo<- myo.markers %>%  slice_max(n = 100, order_by = avg_log2FC)


write.csv(top100.basalduct, "20240724_top100_basalduct.csv")
write.csv(top100.striated, "20240724_top100_striated.csv")
write.csv(top100.intercalated, "20240724_top100_intercalated.csv")
write.csv(top100.GCT, "20240724_top100_GCT.csv")
write.csv(top100.serous, "20240724_top100_serous.csv")
write.csv(top100.seromucus, "20240724_top100_seromucus.csv")
write.csv(top100.k19duct, "20240724_top100_k19duct.csv")
write.csv(top100.myo, "20240724_top100_myo.csv")



vonEbner@meta.data <- vonEbner@meta.data[,-grep("striated_", colnames(vonEbner@meta.data))]
vonEbner@meta.data <- vonEbner@meta.data[,-grep("intercalated_", colnames(vonEbner@meta.data))]
vonEbner@meta.data <- vonEbner@meta.data[,-grep("GCT_", colnames(vonEbner@meta.data))]
vonEbner@meta.data <- vonEbner@meta.data[,-grep("serous_", colnames(vonEbner@meta.data))]
vonEbner@meta.data <- vonEbner@meta.data[,-grep("seromucus_", colnames(vonEbner@meta.data))]
vonEbner@meta.data <- vonEbner@meta.data[,-grep("K19duct_", colnames(vonEbner@meta.data))]
vonEbner@meta.data <- vonEbner@meta.data[,-grep("myo_", colnames(vonEbner@meta.data))]
vonEbner@meta.data <- vonEbner@meta.data[,-grep("basalduct_", colnames(vonEbner@meta.data))]


vonEbner <- AddModuleScore(vonEbner, 
                           features = list(row.names(top100.basalduct)), ctrl =100, 
                           name = "basalduct_score" )
vonEbner <- AddModuleScore(vonEbner, 
                              features = list(row.names(top100.striated)), ctrl =100, 
                              name = "striated_score"                                ) 
vonEbner <- AddModuleScore(vonEbner, 
                           features = list(row.names(top100.intercalated)), ctrl =100, 
                           name = "intercalated_score"                                ) 
vonEbner <- AddModuleScore(vonEbner, 
                           features = list(row.names(top100.GCT)), ctrl =100, 
                           name = "GCT_score"                                )                             
vonEbner <- AddModuleScore(vonEbner, 
                           features = list(row.names(top100.k19duct)), ctrl =100, 
                           name = "k19duct_score"                                ) 
vonEbner <- AddModuleScore(vonEbner, 
                           features = list(row.names(top100.myo)), ctrl =100, 
                           name = "myo_score"                                ) 
vonEbner <- AddModuleScore(vonEbner, 
                           features = list(row.names(top100.serous)), ctrl =100, 
                           name = "serous_score"                                )
vonEbner <- AddModuleScore(vonEbner, 
                           features = list(row.names(top100.seromucus)), ctrl =100, 
                           name = "seromucus_score"    


#### figure S2
vonebneranno.markers <- c("Dcpp1", "Dcpp3","Aqp5", "Bhlha15", "Krt19","Krt8", "Krt7", "Cldn10","Cldn2","Ltf", "Dmbt1","Acta2","Myl9", "Muc19",  "Muc16", "Muc5b", "Amy1", "Mki67", "Krt14", "Krt5", "Kit", "Psca", "Sox9","Epcam")

p <- DotPlot_scCustom(vonEbner , features = vonebneranno.markers)

data <- p$data
ggplot2::ggplot(data, ggplot2::aes(y = id, x = features.plot, size = pct.exp, fill = avg.exp.scaled)) +
  ggplot2::geom_point(shape=21)+
  ggplot2::theme_bw() +
  ggplot2::scale_size_area(max_size = 10) +
  ggplot2::scale_fill_gradient2(low="blue3",high="red3",mid="white",limits=c(-2.5,2.5)) +
  ggplot2::labs(fill="Relative expression", size = "Percent expressed") +
  ggplot2::xlab("Cluster") +
  ggplot2::ylab("Gene") +
  ggplot2::theme(axis.text.y = ggplot2::element_text(size=12,color=clust.cols),
                 axis.text.x = ggplot2::element_text(size=12,angle = 45, hjust=1),
                 axis.title = ggplot2::element_text(size=0),
                 legend.title=ggplot2::element_text(size=14),
                 legend.text = ggplot2::element_text(size=12),
                 legend.position = "bottom",
                 panel.background = ggplot2::element_rect(colour = "black", size=1)+
                   ggplot2::guides(size=ggplot2::guide_legend(ncol=2, title.position = "top"),
                                   fill=ggplot2::guide_colorbar(title.position = "top", label.position = "top")))
